{"version":3,"sources":["components/LoginPanel.js","components/ClassDisplay.js","components/StudentDisplay.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["LoginPanel","props","handleClose","setState","modalActive","handleLoginButton","handleLogin","state","username","password","Modal","show","this","validLogin","onHide","Header","closeButton","Title","Body","Form","Group","Control","onChange","e","target","value","id","className","type","placeholder","errorMSG","Footer","Button","variant","onClick","Component","ClassDisplay","componentDidUpdate","prevProps","data","console","log","uniqueClasses","teachers","Object","keys","map","index","teacher","includes","class","push","students","student","classes","classID","Card","Subtitle","name","Text","count","Accordion","Toggle","as","eventKey","Collapse","GPA","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","testingData","admins","firstName","lastName","App","resetData","setData","userCategory","entry","database","ref","set","checkUserIsAdmin","admin","toString","isAdmin","usersName","loadData","once","snapshot","exists","val","currentUser","uid","signInWithEmailAndPassword","then","catch","error","message","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d94ab51a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nexport default class LoginPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: \"admin@admin.com\", // default credentials; remove later\r\n            password: \"password\",\r\n        }\r\n    }\r\n\r\n    handleClose = () => {\r\n        // console.log(typeof this.state.username)\r\n        this.setState({ modalActive: false })\r\n    }\r\n\r\n    handleLoginButton = () => {\r\n        this.props.handleLogin(this.state.username, this.state.password)        \r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <Modal show={!this.props.validLogin} onHide={this.handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title><h3>Log In</h3></Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Group>\r\n                            <Form.Control\r\n                                onChange={(e) => this.setState({ username: e.target.value })}\r\n                                id=\"SearchText\"\r\n                                className=\"SearchBar\"\r\n                                type=\"textarea\"\r\n                                placeholder=\"Username\" />\r\n                                <br/>\r\n                            <Form.Control\r\n                                onChange={(e) => this.setState({ password: e.target.value })}\r\n                                id=\"SearchText\"\r\n                                className=\"SearchBar\"\r\n                                type=\"textarea\"\r\n                                placeholder=\"Password\" />\r\n                        </Form.Group>\r\n                    </Form>\r\n                    {this.props.errorMSG != null ? (\"ERROR: \" + this.props.errorMSG ): \"\"}\r\n                    </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"success\" onClick={this.handleLoginButton}>Log in</Button>\r\n                    {/* <Button variant=\"secondary\" onClick={this.handleClose}> */}\r\n                        {/* No thanks */}\r\n                    {/* </Button> */}\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport Card from \"react-bootstrap/Card\"\r\nexport default class ClassDisplay extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classes: {},\r\n        }\r\n    }\r\n\r\n    componentDidUpdate = (prevProps) => {\r\n        if (this.props.data != null && this.props.data != prevProps.data) {\r\n            console.log(this.props.data)\r\n            let uniqueClasses = {};\r\n            console.log(this.props.data.teachers)\r\n            Object.keys(this.props.data.teachers).map(index => {\r\n                let teacher = this.props.data.teachers[index];\r\n                if (!Object.keys(uniqueClasses).includes(teacher.class)) {\r\n                    uniqueClasses[teacher.class] = {\r\n                        teachers: [teacher],\r\n                        students: []\r\n                    };\r\n                }\r\n                else{\r\n                    uniqueClasses[teacher.class].teachers.push(teacher)\r\n                }\r\n            })\r\n            Object.keys(this.props.data.students).map(index => {\r\n                let student = this.props.data.students[index];\r\n                uniqueClasses[student.class].students.push(student)\r\n            })\r\n            // for (let teacher of this.props.data.teachers){\r\n            //     console.log(teacher)\r\n\r\n            // }\r\n            console.log(uniqueClasses)\r\n            this.setState({ classes: uniqueClasses });\r\n        }\r\n    }\r\n    render() {\r\n        return <div className=\"classes\">\r\n            {Object.keys(this.state.classes).map(classID => {\r\n                return <Card>\r\n                <Card.Body>\r\n                    <Card.Title>{classID}</Card.Title>\r\n                    <Card.Subtitle className=\"mb-2 text-muted\">Taught by: {this.state.classes[classID].teachers[0].name}</Card.Subtitle>\r\n                    <Card.Text>\r\n                        Students: <br/>\r\n                        {this.state.classes[classID].students.map(student => {return student.name})}\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n            })}\r\n            \r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default class ClassDisplay extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classes: {},\r\n        }\r\n    }\r\n    render() {\r\n        let count=0;\r\n        return <div className=\"students\">\r\n            <Accordion >\r\n                {this.props.data != null &&\r\n                Object.keys(this.props.data.students).map(index => {\r\n                    let student = this.props.data.students[index];\r\n                    return (\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey={count + \"\"}>\r\n                                    {student.name}\r\n                                </Accordion.Toggle>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey={count++ + \"\"}>\r\n                                <Card.Body>\r\n                                    GPA: {student.GPA} \r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    )\r\n                })}\r\n            </Accordion>\r\n        </div>\r\n    }\r\n}","import firebase from \"firebase/app\";\r\n//these imports are what enable the function calls auth() and database()\r\nimport \"firebase/auth\"; \r\nimport \"firebase/database\"\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_FIREBASE_KEY,\r\n    authDomain: \"adminpage-b6e0e.firebaseapp.com\",\r\n    databaseURL: \"https://adminpage-b6e0e.firebaseio.com\",\r\n    projectId: \"adminpage-b6e0e\",\r\n    storageBucket: \"adminpage-b6e0e.appspot.com\",\r\n    messagingSenderId: \"777201403331\",\r\n    appId: \"1:777201403331:web:9de614ccba431384b0e976\",\r\n    measurementId: \"G-WBLEN57M12\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const auth = firebase.auth();\r\nexport default firebase;","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootswatch/dist/slate/bootstrap.min.css';\n\nimport LoginPanel from \"./components/LoginPanel\"\nimport ClassDisplay from \"./components/ClassDisplay\"\nimport StudentDisplay from \"./components/StudentDisplay\"\n\nimport firebase from \"./firebase\"\n\nimport Button from \"react-bootstrap/Button\"\n\nconst testingData = {\n  admins: [{\n    name: \"Admin Name\",\n    id: \"CDZaxVJThgTf3mEMJMjuyP8IVeW2\"\n  }], //holds UIDs of admin accounts\n  teachers: [{\n    name: \"Teacher Name\",\n    class: \"Class 100\",\n    id: \"tz9ehdvIDmRIF2IDHpv3XcMrznw2\" // just teacher@teacher.com\n  },\n  {\n    name: \"Teacher Name2\",\n    class: \"Class 200\",\n    id: \"mZoHc5O4DTdFTMBo1Ax31Bq8PRv2\"\n  }],\n  students: [\n    {\n      name: \"Some Guy\",\n      firstName: \"Some\",\n      lastName: \"Guy\",\n      class: \"Class 200\",\n      GPA: 4\n    }\n  ],\n}\n\n// console.log(testingData.teachers)\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n      // data: testingData, // works without needing local data\n      validLogin: false,\n      errorMSG: null,\n      isAdmin: false\n    }\n  }\n  resetData = () => {\n    this.setState({ data: testingData },\n      () => {\n        this.setData();\n      })\n  }\n\n  setData = () => {\n    Object.keys(this.state.data).map(userCategory => {\n      // console.log(userCategory)\n      // console.log(this.state.data[userCategory]);\n      // if (userCategory == \"admins\") {\n      //   firebase.database().ref(\"admins\").set(this.state.data[\"admins\"])\n      // }\n      // else {\n      this.state.data[userCategory].map(entry => {\n        let DB_ref = firebase.database().ref(\"data/\" + userCategory + \"/\" + entry.id)\n        DB_ref.set(entry)\n      })\n      // }\n    })\n  }\n  checkUserIsAdmin = (id) => {\n    Object.keys(this.state.data.admins).map(index => {\n      // console.log(admin)\n      let admin = this.state.data.admins[index]\n      if (admin.id.toString() === id.toString()) {\n        console.log(\"admin logged in found\")\n        this.setState({ isAdmin: true, usersName:admin.name})\n        // return true;\n      }\n    })\n    // return false;\n  }\n\n  loadData = () => {\n    console.log(\"loading\")\n    firebase.database().ref(\"data\").once(\"value\", snapshot => {\n      if (snapshot && snapshot.exists()) {\n        this.setState({ data: snapshot.val() }, () => {\n          let id = firebase.auth().currentUser.uid;\n        console.log(id);\n        this.checkUserIsAdmin(id);\n        })\n      }\n    })\n  }\n\n  handleLogin = (username, password) => {\n    firebase.auth().signInWithEmailAndPassword(username, password)\n      .then(() => {\n        this.setState({ validLogin: true, })\n\n        this.loadData();\n      }).catch(error => {\n        console.log(error.message);\n        this.setState({ errorMSG: error.message.toString() })\n      })\n        // let id = firebase.auth().currentUser.uid;\n        // console.log(id);\n        // this.checkUserIsAdmin(id);\n\n        // let path = \"data/\";\n        // if (this.state.isAdmin) {\n        //   path += \"admins/\" + id;\n        // }\n        // else {\n        //   path += \"teachers/\" + id;\n        // }\n        // console.log(path)\n        // firebase.database().ref(\"data/admins\"+id).once(\"value\", snapshot => {\n        //   if (snapshot && snapshot.exists()) {\n        //     this.setState({ usersName: snapshot.val().name })\n        //   }\n        //   else{\n            \n        //   }\n        // }).catch(firebase.database().ref(\"data/teachers\"+id).once(\"value\", snapshot => {\n        //   if (snapshot && snapshot.exists()) {\n        //     this.setState({ usersName: snapshot.val().name })\n        //   }\n        // }))\n\n      \n\n    console.log(firebase.auth().currentUser)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        Welcome, {this.state.usersName}\n        <div className=\"info\">\n          <LoginPanel\n            handleLogin={this.handleLogin}\n            errorMSG={this.state.errorMSG}\n            validLogin={this.state.validLogin} />\n\n          <StudentDisplay data={this.state.data} />\n          <ClassDisplay data={this.state.data} />\n\n        </div>\n        <Button onClick={this.resetData}>RESET DATABASE (delete later)</Button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
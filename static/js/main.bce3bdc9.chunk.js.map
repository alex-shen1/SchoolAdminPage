{"version":3,"sources":["components/LoginPanel.js","components/EditClassPanel.js","components/ClassDisplay.js","data.js","components/EditStudentPanel.js","components/StudentDisplay.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["LoginPanel","props","handleClose","setState","modalActive","handleLoginButton","handleLogin","state","username","password","this","Modal","show","validLogin","onHide","Header","closeButton","Title","Body","Form","Group","Control","onChange","e","target","value","id","className","type","placeholder","errorMSG","Footer","Button","variant","onClick","Component","EditClassPanel","closeModal","ClassDisplay","componentDidUpdate","prevProps","data","uniqueClasses","Object","keys","teachers","map","index","teacher","includes","class","push","students","student","console","log","classes","classesRef","set","classID","Card","Subtitle","name","Text","firstName","lastName","fieldFormatter","grade","GPA","testingData","admins","EditStudentPanel","editingStudent","creatingNewStudent","editedStudent","field","Label","editStudent","submitChanges","StudentDisplay","temp","addStudent","openEditMenu","count","Accordion","Toggle","as","eventKey","Collapse","template","formatStudentData","disabled","isAdmin","removeStudent","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","App","resetData","setData","userCategory","entry","database","ref","checkUserIsAdmin","admin","toString","usersName","loadData","once","snapshot","exists","val","currentUser","uid","signInWithEmailAndPassword","then","catch","error","message","removed_student","remove","new_id","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bce3bdc9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nexport default class LoginPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: \"admin@admin.com\", // default credentials; remove later\r\n            // username: \"teacher@teacher.com\",\r\n            password: \"password\",\r\n        }\r\n    }\r\n\r\n    handleClose = () => {\r\n        // console.log(typeof this.state.username)\r\n        this.setState({ modalActive: false })\r\n    }\r\n\r\n    handleLoginButton = () => {\r\n        this.props.handleLogin(this.state.username, this.state.password)        \r\n    }\r\n\r\n    componentDidMount() { // temporary testing method\r\n        this.props.handleLogin(this.state.username, this.state.password) \r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <Modal show={!this.props.validLogin} onHide={this.handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title><h3>Log In</h3></Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Group>\r\n                            <Form.Control\r\n                                onChange={(e) => this.setState({ username: e.target.value })}\r\n                                id=\"SearchText\"\r\n                                className=\"SearchBar\"\r\n                                type=\"textarea\"\r\n                                placeholder=\"Username\" />\r\n                                <br/>\r\n                            <Form.Control\r\n                                onChange={(e) => this.setState({ password: e.target.value })}\r\n                                id=\"SearchText\"\r\n                                className=\"SearchBar\"\r\n                                type=\"textarea\"\r\n                                placeholder=\"Password\" />\r\n                        </Form.Group>\r\n                    </Form>\r\n                    {this.props.errorMSG != null ? (\"ERROR: \" + this.props.errorMSG ): \"\"}\r\n                    </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"success\" onClick={this.handleLoginButton}>Log in</Button>\r\n                    {/* <Button variant=\"secondary\" onClick={this.handleClose}> */}\r\n                        {/* No thanks */}\r\n                    {/* </Button> */}\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\n\r\nexport default class EditClassPanel extends Component {\r\nconstructor(props){\r\n    super(props);\r\n    this.state = {\r\n        modalActive: false\r\n    }\r\n}\r\n    closeModal = ()=> this.setState({modalActive:false})\r\n    render(){\r\n    return <div>\r\n        <Button onClick={()=>this.setState({modalActive:true})}>Edit class</Button>\r\n        <Modal show={this.state.modalActive} onHide={this.closeModal}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title><h3>Edit class</h3></Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {/* <Form>\r\n                        <Form.Group>\r\n                            {Object.keys(this.props.editedStudent).map(field => {\r\n                                if (field != \"id\") {\r\n                                    return <div>\r\n                                        <Form.Label>{fieldFormatter[field]}</Form.Label>\r\n                                        <Form.Control\r\n                                        onChange={(e) => {\r\n                                            console.log(e.target.value);\r\n                                            this.props.editStudent(field, e.target.value)\r\n                                        }}\r\n                                        type=\"textarea\"\r\n                                        placeholder={fieldFormatter[field]}\r\n                                        value={this.props.editedStudent[field]} /> <br />\r\n                                    </div>\r\n                                }\r\n                            })}\r\n                        </Form.Group>\r\n                    </Form> */}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"info\" onClick={this.closeModal}>\r\n                        Save changes</Button>\r\n                    <Button variant=\"secondary\" onClick={this.closeModal}>\r\n                        Cancel\r\n                        </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n    </div>\r\n}\r\n}","import React, { Component } from 'react';\r\n\r\nimport Card from \"react-bootstrap/Card\"\r\nimport Button from \"react-bootstrap/Button\";\r\nimport EditClassPanel from \"./EditClassPanel\"\r\nexport default class ClassDisplay extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classes: {},\r\n        }\r\n    }\r\n\r\n    componentDidUpdate = (prevProps) => {\r\n        if (this.props.data != null && this.props.data != prevProps.data) {\r\n            let uniqueClasses = {};\r\n\r\n            Object.keys(this.props.data.teachers).map(index => {\r\n                let teacher = this.props.data.teachers[index];\r\n                if (!Object.keys(uniqueClasses).includes(teacher.class)) {\r\n                    uniqueClasses[teacher.class] = {\r\n                        teachers: [teacher],\r\n                        students: []\r\n                    };\r\n                }\r\n                else {\r\n                    uniqueClasses[teacher.class].teachers.push(teacher)\r\n                }\r\n            })\r\n            try {\r\n                // assume that students cannot be in a class with no teacher, but the\r\n                // app doesn't actually have error checking for this at the moment\r\n                Object.keys(this.props.data.students).map(index => {\r\n                    let student = this.props.data.students[index];\r\n                    if (!Object.keys(uniqueClasses).includes(student.class)) {\r\n                        uniqueClasses[student.class] = {\r\n                            teachers: [],\r\n                            students: [student]\r\n                        };\r\n                    }\r\n                    else {\r\n                        uniqueClasses[student.class].students.push(student)\r\n                    }\r\n                })\r\n            } catch (e) {\r\n                console.log(\"no students\")\r\n            }\r\n            this.setState({ classes: uniqueClasses });\r\n            this.props.classesRef.set(uniqueClasses);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"classes\">\r\n            <h1>Classes</h1>\r\n            {Object.keys(this.state.classes).map(classID => {\r\n                return <Card>\r\n                    <Card.Body>\r\n                        <Card.Title>{classID} </Card.Title>\r\n                        <Card.Subtitle className=\"mb-2 text-muted\">Taught by: \r\n                        {\" \" + this.state.classes[classID].teachers.map(teacher => { return (teacher.name + \", \")})}</Card.Subtitle>\r\n\r\n                        {/* TODO: figure out how to handle cases w/ 0 teachers */}\r\n                        <Card.Text>\r\n                            Students: <br />\r\n                            {this.state.classes[classID].students.map(student => { return (student.firstName + \" \" + student.lastName + \", \") })}\r\n                        </Card.Text>\r\n\r\n                        <EditClassPanel\r\n                            classID={classID}\r\n                            classesRef={this.props.classesRef} />\r\n                    </Card.Body>\r\n                </Card>\r\n            })}\r\n\r\n        </div>\r\n    }\r\n}","const testingData = {\r\n  admins: [{\r\n    name: \"Mister Admin\",\r\n    id: \"CDZaxVJThgTf3mEMJMjuyP8IVeW2\" // admin@admin.com\r\n  }], //\r\n  teachers: [{\r\n    name: \"Mister Teacher\",\r\n    class: \"Class 100\",\r\n    id: \"tz9ehdvIDmRIF2IDHpv3XcMrznw2\" // just teacher@teacher.com\r\n  },\r\n  {\r\n    name: \"Miss Teacher\",\r\n    class: \"Class 200\",\r\n    id: \"mZoHc5O4DTdFTMBo1Ax31Bq8PRv2\" // teacher2@teacher.com\r\n  }],\r\n  students: [\r\n    {\r\n      firstName: \"Some\",\r\n      lastName: \"Guy\",\r\n      class: \"Class 200\",\r\n      GPA: 4,\r\n      grade: 1,\r\n      id: 123\r\n    },\r\n    {\r\n      firstName: \"Another\",\r\n      lastName: \"Student\",\r\n      class: \"Class 100\",\r\n      GPA: 3,\r\n      grade: 2,\r\n      id: 456\r\n    }\r\n  ],\r\n}\r\n\r\nexport const fieldFormatter = {\r\n  firstName: \"First Name\",\r\n  lastName: \"Last Name\",\r\n  name: \"Name\",\r\n  class: \"Class\",\r\n  grade: \"Grade\",\r\n  GPA: \"GPA\",\r\n}\r\n\r\nexport function formatStudentData(student) {\r\n  let template = {\r\n    class: \"\",\r\n    grade: \"\",\r\n    GPA: \"\"\r\n  }\r\n  Object.keys(template).map(field => {\r\n    if (field != \"name\") {\r\n      template[field] = student[field]\r\n    }\r\n  })\r\n  return template;\r\n}\r\n\r\n\r\nexport default testingData;","import React, { Component } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { fieldFormatter } from \"../data\";\r\n\r\nexport default class EditStudentPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // student: {\r\n            //     \"First Name\": \"\",\r\n            //     \"Last Name\": \"\",\r\n            //     \"Grade\": \"\",\r\n            //     \"GPA\": \"\"\r\n            // },\r\n            modalActive: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // console.log(fieldFormatter)\r\n        return <div>\r\n            <Modal show={this.props.editingStudent} onHide={this.props.closeModal}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title><h3>{this.props.creatingNewStudent ? \"Create new student\" : \"Edit student information\"}</h3></Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Group>\r\n                            {Object.keys(this.props.editedStudent).map(field => {\r\n                                if (field != \"id\") {\r\n                                    return <div>\r\n                                        <Form.Label>{fieldFormatter[field]}</Form.Label>\r\n                                        <Form.Control\r\n                                        onChange={(e) => {\r\n                                            console.log(e.target.value);\r\n                                            this.props.editStudent(field, e.target.value)\r\n                                        }}\r\n                                        type=\"textarea\"\r\n                                        placeholder={fieldFormatter[field]}\r\n                                        value={this.props.editedStudent[field]} /> <br />\r\n                                    </div>\r\n                                }\r\n                            })}\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant={this.props.creatingNewStudent ? \"info\" : \"success\"} onClick={() => this.props.submitChanges()}>\r\n                        {/* {console.log(this.props.creatingNewStudent)} */}\r\n                        {this.props.creatingNewStudent ? \"Create student\" : \"Edit student\"}</Button>\r\n                    <Button variant=\"secondary\" onClick={this.props.closeModal}>\r\n                        Cancel\r\n                        </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport EditStudentPanel from \"./EditStudentPanel\";\r\nimport { fieldFormatter, formatStudentData } from \"../data\";\r\n\r\nexport default class StudentDisplay extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classes: {},\r\n            editingStudent: false,\r\n            editedStudent: {\r\n                firstName: \"\",\r\n                lastName: \"\",\r\n                class: \"\",\r\n                grade: \"\",\r\n                GPA: \"\",\r\n            },\r\n            creatingNewStudent: false // this shouldn't matter\r\n        }\r\n    }\r\n    closeModal = () => {\r\n        this.setState({ editingStudent: false })\r\n    }\r\n\r\n    editStudent = (field, value) => {\r\n        let temp = this.state.editedStudent;\r\n        temp[field] = value;\r\n        this.setState({ student: temp })\r\n        // console.log(field + \" \" + value);\r\n    }\r\n\r\n    submitChanges = () => {\r\n        this.props.addStudent(this.state.editedStudent);\r\n    }\r\n\r\n    openEditMenu = (student) => {\r\n        let temp = this.state.editedStudent;\r\n        Object.keys(student).map(field => {\r\n            temp[field] = student[field]\r\n        })\r\n        // using temp to preserve order\r\n        this.setState({\r\n            editedStudent: temp,\r\n            creatingNewStudent: false\r\n        },\r\n            () => this.setState({ editingStudent: true }))\r\n        // setting state editingStudent must be callback because these need to run in order\r\n    }\r\n    render() {\r\n        let count = 0;\r\n        return <div className=\"students\">\r\n            <h1>Students</h1>\r\n            <Accordion >\r\n                {this.props.data != null && this.props.data.students != null &&\r\n                    Object.keys(this.props.data.students).map(index => {\r\n                        let student = this.props.data.students[index];\r\n                        return (\r\n                            <Card>\r\n                                <Card.Header>\r\n                                    <Accordion.Toggle as={Button} variant=\"link\" eventKey={count + \"\"}>\r\n                                        {student.firstName + \" \" + student.lastName}\r\n                                    </Accordion.Toggle>\r\n                                </Card.Header>\r\n                                <Accordion.Collapse eventKey={count++ + \"\"}>\r\n                                    <Card.Body>\r\n                                        {Object.keys(formatStudentData(student)).map(field => {\r\n                                            // console.log(fieldFormatter);\r\n                                            return <div>\r\n                                                {![\"id\",\"firstName\",\"lastName\"].includes(field) ? fieldFormatter[field] + \": \" + (student)[field] + \"\\n\" : \"\"}\r\n                                            </div>\r\n                                        })}\r\n\r\n                                        <Button\r\n                                            disabled={!(this.props.isAdmin)}\r\n                                            onClick={() => this.openEditMenu(student)}>Edit student</Button>\r\n                                        <Button\r\n                                            disabled={!(this.props.isAdmin)}\r\n                                            onClick={() => this.props.removeStudent(student)}>Remove student</Button>\r\n\r\n                                    </Card.Body>\r\n                                </Accordion.Collapse>\r\n                            </Card>\r\n                        )\r\n                    })}\r\n            </Accordion>\r\n            <Button className=\"createStudent\"\r\n                onClick={() => this.setState({ editingStudent: true, creatingNewStudent: true })}\r\n                disabled={!(this.props.isAdmin)}>\r\n                Create new student\r\n            </Button>\r\n            <EditStudentPanel\r\n                editingStudent={this.state.editingStudent}\r\n                closeModal={this.closeModal}\r\n                editStudent={this.editStudent}\r\n                editedStudent={this.state.editedStudent}\r\n                submitChanges={this.submitChanges}\r\n                creatingNewStudent={this.state.creatingNewStudent} />\r\n        </div>\r\n    }\r\n}","import firebase from \"firebase/app\";\r\n//these imports are what enable the function calls auth() and database()\r\nimport \"firebase/auth\"; \r\nimport \"firebase/database\"\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_FIREBASE_KEY,\r\n    authDomain: \"adminpage-b6e0e.firebaseapp.com\",\r\n    databaseURL: \"https://adminpage-b6e0e.firebaseio.com\",\r\n    projectId: \"adminpage-b6e0e\",\r\n    storageBucket: \"adminpage-b6e0e.appspot.com\",\r\n    messagingSenderId: \"777201403331\",\r\n    appId: \"1:777201403331:web:9de614ccba431384b0e976\",\r\n    measurementId: \"G-WBLEN57M12\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const auth = firebase.auth();\r\nexport default firebase;","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootswatch/dist/slate/bootstrap.min.css';\n\nimport LoginPanel from \"./components/LoginPanel\"\nimport ClassDisplay from \"./components/ClassDisplay\"\nimport StudentDisplay from \"./components/StudentDisplay\"\n\nimport firebase from \"./firebase\"\n\nimport Button from \"react-bootstrap/Button\"\n\nimport testingData from \"./data\"\n\n// console.log(testingData.teachers)\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n      // data: testingData, // works without needing local data\n      validLogin: false,\n      errorMSG: null,\n      isAdmin: false\n    }\n  }\n\n  // resets Firebase data to testingData\n  resetData = () => {\n    this.setState({ data: testingData },\n      () => {\n        this.setData();\n      })\n  }\n\n  // sets Firebase to state.data\n  setData = () => { \n    Object.keys(this.state.data).map(userCategory => {\n      // console.log(userCategory)\n      // console.log(this.state.data[userCategory]);\n      // if (userCategory == \"admins\") {\n      //   firebase.database().ref(\"admins\").set(this.state.data[\"admins\"])\n      // }\n      // else {\n      this.state.data[userCategory].map(entry => {\n        let DB_ref = firebase.database().ref(\"data/\" + userCategory + \"/\" + entry.id)\n        DB_ref.set(entry)\n      })\n      // }\n    })\n  }\n  checkUserIsAdmin = (id) => {\n    let isAdmin = false;\n    Object.keys(this.state.data.admins).map(index => {\n      // console.log(admin)\n      let admin = this.state.data.admins[index]\n      if (admin.id.toString() === id.toString()) {\n        console.log(\"admin logged in found\")\n        isAdmin = true;\n        this.setState({ isAdmin: true, usersName: admin.name })\n        // return true;\n      }\n    })\n    if(!isAdmin){\n      this.setState({usersName: this.state.data.teachers[id].name})\n    }\n    // return false;\n  }\n\n  loadData = () => {\n    firebase.database().ref(\"data\").once(\"value\", snapshot => {\n      if (snapshot && snapshot.exists()) {\n        this.setState({ data: snapshot.val() }, () => {\n          let id = firebase.auth().currentUser.uid;\n          console.log(id);\n          this.checkUserIsAdmin(id);\n        })\n      }\n    })\n  }\n\n  handleLogin = (username, password) => {\n    firebase.auth().signInWithEmailAndPassword(username, password)\n      .then(() => {\n        this.setState({ validLogin: true, })\n\n        this.loadData();\n      }).catch(error => {\n        console.log(error.message);\n        this.setState({ errorMSG: error.message.toString() })\n      })\n    // let id = firebase.auth().currentUser.uid;\n    // console.log(id);\n    // this.checkUserIsAdmin(id);\n\n    // let path = \"data/\";\n    // if (this.state.isAdmin) {\n    //   path += \"admins/\" + id;\n    // }\n    // else {\n    //   path += \"teachers/\" + id;\n    // }\n    // console.log(path)\n    // firebase.database().ref(\"data/admins\"+id).once(\"value\", snapshot => {\n    //   if (snapshot && snapshot.exists()) {\n    //     this.setState({ usersName: snapshot.val().name })\n    //   }\n    //   else{\n\n    //   }\n    // }).catch(firebase.database().ref(\"data/teachers\"+id).once(\"value\", snapshot => {\n    //   if (snapshot && snapshot.exists()) {\n    //     this.setState({ usersName: snapshot.val().name })\n    //   }\n    // }))\n    // console.log(firebase.auth().currentUser)\n  }\n\n  removeStudent = (removed_student) => {\n    firebase.database().ref(\"data/students/\" + removed_student.id).remove();\n    this.loadData();\n  }\n  addStudent = (student) => {\n    let new_id=0;\n    Object.keys(this.state.data.students).map(id=>{\n      if(new_id < parseInt(id)){\n        new_id = parseInt(id) + 1;\n      }\n    })\n    student[\"id\"] = new_id;\n    firebase.database().ref(\"data/students/\" + student.id).set(student)\n    this.loadData();\n  }\n\n  // editStudent = (edited_student, id) => {\n  //   edited_student[\"id\"] = id;\n  //   firebase.database().ref(\"data/students/\" + id).set(edited_student)\n  // }\n\n  render() {\n    return (\n      <div className=\"App\">\n        Welcome, {this.state.usersName}\n        <div className=\"info\">\n          <LoginPanel\n            handleLogin={this.handleLogin}\n            errorMSG={this.state.errorMSG}\n            validLogin={this.state.validLogin} />\n\n          <StudentDisplay \n          data={this.state.data}\n          removeStudent={this.removeStudent} \n          addStudent={this.addStudent}\n          editStudent={this.editStudent}\n          isAdmin={this.state.isAdmin}/>\n          <ClassDisplay\n            data={this.state.data}\n            classesRef={firebase.database().ref(\"data/classes\")}\n          />\n\n        </div>\n        <Button onClick={this.resetData}>RESET DATABASE (delete later)</Button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
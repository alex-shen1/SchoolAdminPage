{"version":3,"sources":["components/LoginPanel.js","components/EditClassPanel.js","components/ClassDisplay.js","components/EditPanel.js","data.js","components/PeopleDisplay.js","components/InfoPanel.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["LoginPanel","props","handleClose","setState","modalActive","handleLoginButton","handleLogin","state","username","password","Modal","show","this","validLogin","onHide","Header","closeButton","Title","Body","Form","Group","Control","onChange","e","target","value","id","className","type","placeholder","as","errorMSG","Footer","Button","variant","onClick","Component","EditClassPanel","submitChanges","updateTeachers","exitEditing","console","log","selectedTeachers","updatedClassTeachers","map","teachers","db","ref","set","updatedTeacherData","Object","keys","index","includes","class","componentDidMount","editedClass","toggleSelectedTeacher","temp","splice","indexOf","push","testIfChecked","prevProps","teacher","Check","custom","defaultChecked","label","firstName","lastName","ClassDisplay","componentDidUpdate","on","snapshot","exists","classes","val","data","uniqueClasses","students","student","classID","Card","Subtitle","undefined","values","Text","disabled","isAdmin","editClassName","EditPanel","currentlyEditing","closeModal","creatingNew","editedObjectType","editedObject","field","Label","fieldFormatter","editField","studentFieldFormatter","name","grade","GPA","teacherFieldFormatter","formatStudentData","template","formatTeacherData","studentTemplate","teacherTemplate","testingData","admins","PeopleDisplay","removePerson","removed_person","categoryPath","personType","toLowerCase","remove","addPerson","added_person","new_id","people","parseInt","insertEditedPerson","edited_person","editingPerson","editedPerson","creatingNewPerson","openEditMenu","person","openCreateMenu","count","Accordion","Toggle","eventKey","Collapse","formatData","InfoPanel","Tabs","defaultActiveKey","Tab","title","removeObject","removeStudent","addObject","addStudent","editObject","editStudent","process","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","App","resetData","database","userCategory","entry","checkUserIsAdmin","admin","toString","usersName","loadData","currentUser","uid","signInWithEmailAndPassword","then","catch","error","message","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.22bd51be.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nexport default class LoginPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\",\r\n        }\r\n    }\r\n\r\n    handleClose = () => {\r\n        // console.log(typeof this.state.username)\r\n        this.setState({ modalActive: false })\r\n    }\r\n\r\n    handleLoginButton = () => {\r\n        this.props.handleLogin(this.state.username, this.state.password)        \r\n    }\r\n\r\n    // temporary testing method; remove later\r\n    // componentDidMount() { \r\n    //     this.props.handleLogin(\"admin@admin.com\", \"password\") \r\n    //     // this.props.handleLogin(\"teacher@teacher.com\", \"password\") \r\n    // }\r\n\r\n    render() {\r\n        return <div>\r\n            <Modal show={!this.props.validLogin} onHide={this.handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title><h3>Log In</h3></Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Group>\r\n                            <Form.Control\r\n                                onChange={(e) => this.setState({ username: e.target.value })}\r\n                                id=\"SearchText\"\r\n                                className=\"SearchBar\"\r\n                                type=\"textarea\"\r\n                                placeholder=\"Username\" />\r\n                                <br/>\r\n                            <Form.Control\r\n                                onChange={(e) => this.setState({ password: e.target.value })}\r\n                                as=\"input\"\r\n                                type=\"password\"\r\n                                id=\"SearchText\"\r\n                                className=\"SearchBar\"\r\n                                // type=\"textarea\"\r\n                                placeholder=\"Password\" />\r\n                        </Form.Group>\r\n                    </Form>\r\n                    {this.props.errorMSG != null ? (\"ERROR: \" + this.props.errorMSG ): \"\"}\r\n                    </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"success\" onClick={this.handleLoginButton}>Log in</Button>\r\n                    {/* <Button variant=\"secondary\" onClick={this.handleClose}> */}\r\n                        {/* No thanks */}\r\n                    {/* </Button> */}\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\n\r\nexport default class EditClassPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // modalActive: false,\r\n            selectedTeachers: null // holds IDs of teachers selected in the panel\r\n        }\r\n    }\r\n    // closeModal = () => this.setState({ modalActive: false })\r\n\r\n    submitChanges = () => {\r\n        this.updateTeachers()\r\n        this.props.exitEditing();\r\n    }\r\n    updateTeachers = () => {\r\n        console.log(this.state.selectedTeachers)\r\n        let updatedClassTeachers = {};\r\n        this.state.selectedTeachers.map(id => {\r\n            updatedClassTeachers[id] = this.props.teachers[id]\r\n        })\r\n        this.props.db.ref(`data/classes/${this.props.className}/teachers`).set(updatedClassTeachers)\r\n\r\n        let updatedTeacherData = this.props.teachers;\r\n        // console.log(updatedTeacherData)\r\n        Object.keys(this.props.teachers).map(index => {\r\n            if(this.state.selectedTeachers.includes(index)){\r\n                updatedTeacherData[index].class = this.props.className\r\n            }\r\n            else if(updatedTeacherData[index.class] == this.props.className){\r\n                console.log(\"removing teacher from class\")\r\n                updatedTeacherData[index.class] = null;\r\n            }\r\n        })\r\n        console.log(updatedTeacherData);\r\n        // this.props.db.ref(\"data/teachers\").remove();\r\n        this.props.db.ref(\"data/teachers\").set(updatedTeacherData);\r\n    }\r\n\r\n    // TODO: figure out why this only triggers *after* the edit panel opens\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.editedClass !== prevProps.editedClass && this.props.editedClass !== null) {\r\n            this.setState({ selectedTeachers: Object.keys(this.props.editedClass.teachers) })\r\n            // console.log(\"updating list\")\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => this.setState({ selectedTeachers: Object.keys(this.props.editedClass.teachers) })\r\n\r\n    toggleSelectedTeacher = (id) => {\r\n        // console.log(id)\r\n        let temp = this.state.selectedTeachers;\r\n        if (this.state.selectedTeachers.includes(id)) {\r\n            temp.splice(temp.indexOf(id), 1)\r\n            this.setState({ selectedTeachers: temp })\r\n        }\r\n        else {\r\n            temp.push(id);\r\n        }\r\n        console.log(this.state.selectedTeachers)\r\n    }\r\n\r\n    // needs to run because setState doesn't work fast enough at first\r\n    testIfChecked = (index) => {\r\n        if (this.state.selectedTeachers === null) {\r\n            return Object.keys(this.props.editedClass.teachers).includes(index)\r\n        }\r\n        return this.state.selectedTeachers.includes(index)\r\n    }\r\n    render() {\r\n        // console.log(this.props.editedClass)\r\n        return <div>\r\n            <Modal show={this.props.editedClass != null} onHide={this.props.exitEditing}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title><h3>Edit {this.props.className}</h3></Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <h5>Teachers:</h5>\r\n                        {this.props.teachers !== null ? Object.keys(this.props.teachers).map(index => {\r\n                            const teacher = this.props.teachers[index];\r\n                            return <Form.Check\r\n                                custom\r\n                                type=\"checkbox\"\r\n                                id={`custom-checkbox-${index}`} // functionally equivalent to setting to teacherID\r\n                                defaultChecked={this.testIfChecked(index)}\r\n                                // checked={this.state.selectedTeachers.includes(index)}\r\n                                onClick={() => this.toggleSelectedTeacher(index)}\r\n                                // id=\"default-checkbox\"\r\n                                label={teacher.firstName + \" \" + teacher.lastName}\r\n                            />\r\n                            // </div>\r\n                        }) : \"\"}\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"info\" onClick={this.submitChanges}>\r\n                        Save changes</Button>\r\n                    <Button variant=\"secondary\" onClick={this.props.exitEditing}>\r\n                        Cancel\r\n                        </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport Card from \"react-bootstrap/Card\"\r\nimport Button from \"react-bootstrap/Button\";\r\nimport EditClassPanel from \"./EditClassPanel\"\r\nexport default class ClassDisplay extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classes: null,\r\n            editedClass: null\r\n        }\r\n    }\r\n\r\n    componentDidUpdate = (prevProps) => {\r\n        if (this.props != prevProps) {\r\n            if (this.props.validLogin && prevProps.validLogin && this.props.validLogin) {\r\n                this.props.db.ref(\"data/classes\").on(\"value\", snapshot => {\r\n                    if (snapshot && snapshot.exists()) {\r\n                        this.setState({ classes: snapshot.val() })\r\n                        console.log(this.state.classes)\r\n                    }\r\n                })\r\n            }\r\n            if (this.props.data != null && prevProps.data != null) {\r\n                if (this.props.data.classes == prevProps.data.classes) {\r\n                    let uniqueClasses = {};\r\n                    try {\r\n                        Object.keys(this.props.data.teachers).map(index => {\r\n                            let teacher = this.props.data.teachers[index];\r\n                            if (!Object.keys(uniqueClasses).includes(teacher.class)) {\r\n                                uniqueClasses[teacher.class] = {\r\n                                    teachers: {},\r\n                                    students: {}\r\n                                };\r\n                            }\r\n                            uniqueClasses[teacher.class].teachers[teacher.id] = teacher;\r\n                        })\r\n                    } catch (e) {\r\n                        console.log(\"no teachers\")\r\n                    }\r\n                    try {\r\n                        Object.keys(this.props.data.students).map(index => {\r\n                            let student = this.props.data.students[index];\r\n                            if (!Object.keys(uniqueClasses).includes(student.class)) {\r\n                                uniqueClasses[student.class] = {\r\n                                    teachers: {},\r\n                                    students: {}\r\n                                };\r\n                            }\r\n                            uniqueClasses[student.class].students[student.id] = student;\r\n                        })\r\n                    } catch (e) {\r\n                        console.log(\"no students\")\r\n                    }\r\n                    this.setState({ classes: uniqueClasses });\r\n                    this.props.db.ref(\"data/classes\").set(uniqueClasses);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    exitEditing = () => {\r\n        this.setState({ editedClass: null })\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"classes\">\r\n            <h1>Classes</h1>\r\n            {this.state.classes !== null ? Object.keys(this.state.classes).map(classID => {\r\n                return <Card>\r\n                    <Card.Body>\r\n                        <Card.Title>{classID} </Card.Title>\r\n                        <Card.Subtitle className=\"mb-2 text-muted\">Taught by:\r\n                        {this.state.classes[classID].teachers !== undefined ? Object.values(this.state.classes[classID].teachers).map(teacher => {\r\n                            return \" \" + (teacher.firstName + \" \" + teacher.lastName)\r\n                        }) : \" no one\"}</Card.Subtitle>\r\n\r\n                        <Card.Text>\r\n                            Students: <br />\r\n                            {this.state.classes[classID].students !== undefined ? Object.values(this.state.classes[classID].students).map(student => {\r\n                                return (\" \" + student.firstName + \" \" + student.lastName)\r\n                            }) : \"\"}\r\n                        </Card.Text>\r\n                        <Button disabled={!this.props.isAdmin} onClick={() => { console.log(\"changing\"); this.setState({ editedClass: this.state.classes[classID], editClassName: classID }) }}>Edit class</Button>\r\n                    </Card.Body>\r\n                </Card>\r\n            }) : \"\"}\r\n\r\n            {this.state.editedClass != null ? <EditClassPanel\r\n                className={this.state.editClassName}\r\n                editedClass={this.state.editedClass}\r\n                exitEditing={this.exitEditing}\r\n                db={this.props.db}\r\n                teachers={this.props.data != null ? this.props.data.teachers : null} /> : \"\"}\r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\n// import { this.props.fieldFormatter } from \"../data\";\r\n\r\nexport default class EditPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    // could turn this into functional component later but don't feel like doing it now\r\n\r\n    render() {\r\n        // console.log(this.props.this.props.fieldFormatter)\r\n        return <div>\r\n            <Modal show={this.props.currentlyEditing} onHide={this.props.closeModal}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title><h3>{(this.props.creatingNew ? \"Create \" : \"Edit \") + this.props.editedObjectType}</h3></Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Group>\r\n                            {Object.keys(this.props.editedObject).map(field => {\r\n                                if (field != \"id\") {\r\n                                    return <div>\r\n                                        <Form.Label>{this.props.fieldFormatter[field]}</Form.Label>\r\n                                        <Form.Control\r\n                                        onChange={(e) => {\r\n                                            // console.log(e.target.value);\r\n                                            this.props.editField(field, e.target.value)\r\n                                        }}\r\n                                        type=\"textarea\"\r\n                                        placeholder={this.props.fieldFormatter[field]}\r\n                                        value={this.props.editedObject[field]} /> <br />\r\n                                    </div>\r\n                                }\r\n                            })}\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"info\" onClick={() => this.props.submitChanges()}>\r\n                        {this.props.creatingNew ? (\"Create \" + this.props.editedObjectType) : \"Save changes\"}</Button>\r\n                    <Button variant=\"secondary\" onClick={this.props.closeModal}>\r\n                        Cancel\r\n                        </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    }\r\n}","const testingData = {\r\n  admins: [{\r\n    firstName: \"Mister\",\r\n    lastName: \"Admin\",\r\n    id: \"CDZaxVJThgTf3mEMJMjuyP8IVeW2\" // admin@admin.com\r\n  }], //\r\n  teachers: [{\r\n    firstName: \"Mister\",\r\n    lastName: \"Teacher\",\r\n    class: \"Class 100\",\r\n    id: \"tz9ehdvIDmRIF2IDHpv3XcMrznw2\" // just teacher@teacher.com\r\n  },\r\n  {\r\n    firstName: \"Miss\",\r\n    lastName: \"Teacher\",\r\n    class: \"Class 200\",\r\n    id: \"mZoHc5O4DTdFTMBo1Ax31Bq8PRv2\" // teacher2@teacher.com\r\n  }],\r\n  students: [\r\n    {\r\n      firstName: \"Some\",\r\n      lastName: \"Guy\",\r\n      class: \"Class 200\",\r\n      GPA: 4,\r\n      grade: 1,\r\n      id: 123\r\n    },\r\n    {\r\n      firstName: \"Another\",\r\n      lastName: \"Student\",\r\n      class: \"Class 100\",\r\n      GPA: 3,\r\n      grade: 2,\r\n      id: 456\r\n    }\r\n  ],\r\n}\r\n\r\n// converts field names into capitalized strings for pretty display\r\nexport const studentFieldFormatter = {\r\n  firstName: \"First Name\",\r\n  lastName: \"Last Name\",\r\n  name: \"Name\",\r\n  class: \"Class\",\r\n  grade: \"Grade\",\r\n  GPA: \"GPA\",\r\n}\r\n\r\nexport const teacherFieldFormatter = {\r\n  firstName: \"First Name\",\r\n  lastName: \"Last Name\",\r\n  class: \"Class\"\r\n}\r\n\r\n\r\n// formats student/teacher data into correct order of fields\r\nexport const formatStudentData = (student) => {\r\n  let template = {\r\n    class: \"\",\r\n    grade: \"\",\r\n    GPA: \"\"\r\n  }\r\n  Object.keys(template).map(field => {\r\n    if (field != \"name\") {\r\n      template[field] = student[field]\r\n    }\r\n  })\r\n  return template;\r\n}\r\n\r\nexport const formatTeacherData = (teacher) => {\r\n  let template = {\r\n    class: \"\",\r\n  }\r\n  Object.keys(template).map(field => {\r\n    if (field != \"name\") {\r\n      template[field] = teacher[field]\r\n    }\r\n  })\r\n  return template;\r\n}\r\n\r\n// these templates are necessary for formatting; by default the fields will be sorted alphabetically\r\n// this might actually be redundant given formatStudentData but I'm not going to risk breaking it to find out now\r\nexport const studentTemplate = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  class: \"\",\r\n  grade: \"\",\r\n  GPA: \"\",\r\n  id: \"\"\r\n}\r\n\r\nexport const teacherTemplate = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  class: \"\",\r\n  id: \"\"\r\n}\r\n\r\n\r\nexport default testingData;","import React, { Component } from 'react';\r\n\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport EditPanel from \"./EditPanel\";\r\n\r\nimport { studentTemplate, teacherTemplate } from \"../data\"\r\n\r\nexport default class PeopleDisplay extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classes: {},\r\n            editingPerson: false,\r\n            editedPerson: {},\r\n            creatingNewPerson: false // this shouldn't matter\r\n        }\r\n    }\r\n\r\n    removePerson = (removed_person) => {\r\n        let categoryPath = this.props.personType.toLowerCase() + \"s/\"\r\n        this.props.db.ref(\"data/\" + categoryPath + removed_person.id).remove();\r\n    }\r\n    addPerson = (added_person) => {\r\n        if (this.props.personType == \"Student\") {\r\n            let new_id = 0;\r\n            if (this.props.people == null) {\r\n                added_person[\"id\"] = 1;\r\n            }\r\n            else {\r\n                Object.keys(this.props.people).map(id => {\r\n                    if (new_id < parseInt(id)) {\r\n                        new_id = parseInt(id) + 1;\r\n                    }\r\n                })\r\n            }\r\n            added_person[\"id\"] = new_id;\r\n            console.log(added_person);\r\n            this.props.db.ref(\"data/students/\" + added_person.id).set(added_person)\r\n        }\r\n        else{\r\n            // TODO: handle teacher account creation (more complex; needs to set up user auth)\r\n        }\r\n    }\r\n    insertEditedPerson = (edited_person) => {\r\n        let categoryPath = this.props.personType.toLowerCase() + \"s/\"\r\n        this.props.db.ref(\"data/\" + categoryPath + edited_person.id).set(edited_person)\r\n    }\r\n\r\n    closeModal = () => this.setState({ editingPerson: false, editedPerson: {} })\r\n\r\n    editField = (field, value) => {\r\n        let temp = this.state.editedPerson;\r\n        temp[field] = value;\r\n        this.setState({ editedPerson: temp })\r\n    }\r\n\r\n    submitChanges = () => {\r\n        if (this.state.creatingNewPerson) {\r\n            // this.props.addObject(this.state.editedPerson);\r\n            this.addPerson(this.state.editedPerson)\r\n        }\r\n        else {\r\n            this.insertEditedPerson(this.state.editedPerson)\r\n            // this.props.editField(this.state.editedPerson)\r\n        }\r\n        this.closeModal();\r\n    }\r\n\r\n    openEditMenu = (person) => {\r\n        let temp = this.props.personType == \"Student\" ? studentTemplate : teacherTemplate;\r\n        Object.keys(person).map(field => {\r\n            temp[field] = person[field]\r\n        })\r\n        // using temp to preserve order\r\n        this.setState({\r\n            editedPerson: temp,\r\n            creatingNewPerson: false,\r\n        },\r\n            () => this.setState({ editingPerson: true }))\r\n        // setting state editingPerson must be callback because these need to run in order\r\n    }\r\n\r\n    openCreateMenu = () => {\r\n        this.setState({ editedPerson: this.props.personType == \"Student\" ? studentTemplate : teacherTemplate, editingPerson: true, creatingNewPerson: true })\r\n    }\r\n    render() {\r\n        let count = 0;\r\n        // console.log(typeof this.props.formatData)\r\n        return <div className=\"people\">\r\n            <Accordion >\r\n                {this.props.people != null && this.props.people != null &&\r\n                    Object.keys(this.props.people).map(index => {\r\n                        let person = this.props.people[index];\r\n                        return (\r\n                            <Card>\r\n                                <Card.Header>\r\n                                    <Accordion.Toggle as={Button} variant=\"link\" eventKey={count + \"\"}>\r\n                                        {person.firstName + \" \" + person.lastName}\r\n                                    </Accordion.Toggle>\r\n                                </Card.Header>\r\n                                <Accordion.Collapse eventKey={count++ + \"\"}>\r\n                                    <Card.Body>\r\n                                        {Object.keys(this.props.formatData(person)).map(field => {\r\n                                            return <div>\r\n                                                {![\"id\", \"firstName\", \"lastName\"].includes(field) ? this.props.fieldFormatter[field] + \": \" + (person)[field] + \"\\n\" : \"\"}\r\n                                            </div>\r\n                                        })}\r\n\r\n                                        <Button\r\n                                            disabled={!(this.props.isAdmin)}\r\n                                            onClick={() => this.openEditMenu(person)}>{\"Edit \" + this.props.personType.toLowerCase()}</Button>\r\n                                        <Button\r\n                                            disabled={!(this.props.isAdmin)}\r\n                                            onClick={() => this.removePerson(person)}>{\"Remove \" + this.props.personType.toLowerCase()}</Button>\r\n\r\n                                    </Card.Body>\r\n                                </Accordion.Collapse>\r\n                            </Card>\r\n                        )\r\n                    })}\r\n            </Accordion>\r\n\r\n            <EditPanel\r\n                currentlyEditing={this.state.editingPerson}\r\n                closeModal={this.closeModal}\r\n                editField={this.editField}\r\n                editedObject={this.state.editedPerson}\r\n                submitChanges={this.submitChanges}\r\n                creatingNew={this.state.creatingNewPerson}\r\n                editedObjectType={this.props.personType}\r\n                fieldFormatter={this.props.fieldFormatter}\r\n                db={this.props.db} />\r\n\r\n            <div className=\"createPerson\">\r\n                <Button\r\n                    onClick={() => this.openCreateMenu()}\r\n                    disabled={!(this.props.isAdmin)}>\r\n                    {\"Create new \" + this.props.personType.toLowerCase()}\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport PeopleDisplay from \"./PeopleDisplay\"\r\nimport Tab from 'react-bootstrap/Tab'\r\n\r\nimport Tabs from \"react-bootstrap/Tabs\"\r\n\r\nimport { studentFieldFormatter, formatStudentData, teacherFieldFormatter, formatTeacherData } from \"../data\";\r\n\r\nexport default class InfoPanel extends Component {\r\n    render() {\r\n        // console.log(typeof formatStudentData);\r\n        return <div>\r\n                        <h1>People</h1>\r\n            <Tabs defaultActiveKey=\"students\">\r\n                <Tab eventKey=\"students\" title=\"Students\" className=\"tab\">\r\n                    <PeopleDisplay id=\"studentDisplay\"\r\n                        people={this.props.data != null ? this.props.data.students : null}\r\n                        removeObject={this.props.removeStudent}\r\n                        addObject={this.props.addStudent}\r\n                        editObject={this.props.editStudent}\r\n                        isAdmin={this.props.isAdmin} \r\n                        formatData={formatStudentData}\r\n                        fieldFormatter={studentFieldFormatter}\r\n                        personType=\"Student\"\r\n                        db={this.props.db}/>\r\n                </Tab>\r\n                <Tab eventKey=\"teachers\" title=\"Teachers\" className=\"tab\">\r\n                    <PeopleDisplay id=\"teacherDisplay\"\r\n                        people={this.props.data != null ? this.props.data.teachers : null}\r\n                        removeObject={this.props.removeStudent}\r\n                        addObject={this.props.addStudent}\r\n                        editObject={this.props.editStudent}\r\n                        isAdmin={this.props.isAdmin} \r\n                        formatData={formatTeacherData}\r\n                        fieldFormatter={teacherFieldFormatter}\r\n                        personType=\"Teacher\"\r\n                        db={this.props.db}\r\n                    />\r\n                </Tab>\r\n\r\n            </Tabs>\r\n\r\n        </div>\r\n    }\r\n}","import firebase from \"firebase/app\";\r\n//these imports are what enable the function calls auth() and database()\r\nimport \"firebase/auth\"; \r\nimport \"firebase/database\"\r\n\r\nconsole.log(process.env.REACT_APP_FIREBASE_KEY)\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_FIREBASE_KEY,\r\n    authDomain: \"adminpage-b6e0e.firebaseapp.com\",\r\n    databaseURL: \"https://adminpage-b6e0e.firebaseio.com\",\r\n    projectId: \"adminpage-b6e0e\",\r\n    storageBucket: \"adminpage-b6e0e.appspot.com\",\r\n    messagingSenderId: \"777201403331\",\r\n    appId: \"1:777201403331:web:9de614ccba431384b0e976\",\r\n    measurementId: \"G-WBLEN57M12\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const auth = firebase.auth();\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport 'bootswatch/dist/slate/bootstrap.min.css';\r\n\r\nimport LoginPanel from \"./components/LoginPanel\"\r\nimport ClassDisplay from \"./components/ClassDisplay\"\r\nimport InfoPanel from \"./components/InfoPanel\"\r\nimport firebase from \"./firebase\"\r\n\r\nimport Button from \"react-bootstrap/Button\"\r\n\r\nimport testingData from \"./data\"\r\n\r\n// console.log(testingData.teachers)\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: null,\r\n      // data: testingData, // works without needing local data\r\n      validLogin: false,\r\n      errorMSG: null,\r\n      isAdmin: false\r\n    }\r\n  }\r\n\r\n  // resets Firebase data to testingData\r\n  resetData = () => {\r\n    firebase.database().ref(\"data\").remove();\r\n    this.setState({ data: testingData },\r\n      () => {\r\n        Object.keys(this.state.data).map(userCategory => {\r\n          this.state.data[userCategory].map(entry => {\r\n            let DB_ref = firebase.database().ref(\"data/\" + userCategory + \"/\" + entry.id)\r\n            DB_ref.set(entry)\r\n          })\r\n          // }\r\n        })\r\n      })\r\n  }\r\n\r\n  checkUserIsAdmin = (id) => {\r\n    let isAdmin = false;\r\n    try {\r\n      Object.keys(this.state.data.admins).map(index => {\r\n        // console.log(admin)\r\n        let admin = this.state.data.admins[index]\r\n        if (admin.id.toString() === id.toString()) {\r\n          console.log(\"admin logged in\")\r\n          isAdmin = true;\r\n          this.setState({ isAdmin: true, usersName: (admin.firstName + \" \" + admin.lastName) })\r\n          // return true;\r\n        }\r\n      })\r\n      if (!isAdmin) {\r\n        let teacher = this.state.data.teachers[id];\r\n        this.setState({ usersName: teacher.firstName + \" \" + teacher.lastName })\r\n      }\r\n    } catch (e) {\r\n      console.log(\"no admins\")\r\n    }\r\n    // return false;\r\n  }\r\n\r\n  loadData = () => {\r\n    firebase.database().ref(\"data\").on(\"value\", snapshot => {\r\n      if (snapshot && snapshot.exists()) {\r\n        this.setState({ data: snapshot.val() }, () => {\r\n          let id = firebase.auth().currentUser.uid;\r\n          // console.log(id);\r\n          this.checkUserIsAdmin(id);\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  handleLogin = (username, password) => {\r\n    firebase.auth().signInWithEmailAndPassword(username, password)\r\n      .then(() => {\r\n        this.setState({ validLogin: true, })\r\n\r\n        this.loadData();\r\n      }).catch(error => {\r\n        console.log(error.message);\r\n        this.setState({ errorMSG: error.message.toString() })\r\n      })\r\n    // let id = firebase.auth().currentUser.uid;\r\n    // console.log(id);\r\n    // this.checkUserIsAdmin(id);\r\n\r\n    // let path = \"data/\";\r\n    // if (this.state.isAdmin) {\r\n    //   path += \"admins/\" + id;\r\n    // }\r\n    // else {\r\n    //   path += \"teachers/\" + id;\r\n    // }\r\n    // console.log(path)\r\n    // firebase.database().ref(\"data/admins\"+id).once(\"value\", snapshot => {\r\n    //   if (snapshot && snapshot.exists()) {\r\n    //     this.setState({ usersName: snapshot.val().name })\r\n    //   }\r\n    //   else{\r\n\r\n    //   }\r\n    // }).catch(firebase.database().ref(\"data/teachers\"+id).once(\"value\", snapshot => {\r\n    //   if (snapshot && snapshot.exists()) {\r\n    //     this.setState({ usersName: snapshot.val().name })\r\n    //   }\r\n    // }))\r\n    // console.log(firebase.auth().currentUser)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {/* {this.state.validLogin ? */}\r\n        {this.state.validLogin ? <div> <div className=\"welcomeMessage\">\r\n          Welcome, {this.state.usersName}\r\n        </div>\r\n          <div className=\"info\">\r\n\r\n\r\n            <InfoPanel\r\n              data={this.state.data}\r\n              isAdmin={this.state.isAdmin}\r\n              db={firebase.database()} />\r\n\r\n            <ClassDisplay\r\n              data={this.state.data}\r\n              validLogin={this.state.validLogin}\r\n              isAdmin={this.state.isAdmin}\r\n              db={firebase.database()}\r\n            />\r\n          </div>\r\n          {/* <Button onClick={this.resetData}>RESET DATABASE (delete later)</Button> */}\r\n          </div> :\r\n          <LoginPanel\r\n            handleLogin={this.handleLogin}\r\n            errorMSG={this.state.errorMSG}\r\n            validLogin={this.state.validLogin} />}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}